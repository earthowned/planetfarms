@import "./variables";

@mixin breakpoint($point, $sizeType: "minMax") {
  @if $sizeType == "minMax" {
    @if $point == "mobile" {
      @media (orientation: portrait) and (min-width: 0) and (max-width: $media-mobile-max-width) {
        @content;
      }
      @media (orientation: landscape) and (min-width: 0) and (max-width: $media-tablet-max-width) {
        @content;
      }
    } @else if $point == "tablet" {
      @media (min-width: ($media-mobile-max-width + 1)) and (max-width: $media-tablet-max-width) {
        @content;
      }
    } @else if $point == "laptop" {
      @media (min-width: ($media-tablet-max-width + 1)) and (max-width: $media-laptop-max-width) {
        @content;
      }
    } @else if $point = "desktop" {
      @media (min-width: ($media-laptop-max-width + 1)) {
        @content;
      }
    }
  } @else if $sizeType == "max" {
    @if $point == "mobile" {
      @media (orientation: portrait) and (max-width: $media-mobile-max-width) {
        @content;
      }
      @media (orientation: landscape) and (max-width: $media-tablet-max-width) {
        @content;
      }
    } @else if $point == "tablet" {
      @media (max-width: $media-tablet-max-width) {
        @content;
      }
    } @else if $point == "laptop" {
      @media (max-width: $media-laptop-max-width) {
        @content;
      }
    }
  }
}

@mixin setSvgColor($color) {
  svg {
    path {
      fill: $color;
    }
  }
}

@mixin transition($property, $time: 0.5s, $easing: ease-in-out) {
  transition: $property $time $easing;
  -o-transition: $property $time $easing;
  -moz-transition: $property $time $easing;
  -webkit-transition: $property $time $easing;
}

@mixin removeTransition() {
  transition: none;
  -o-transition: none;
  -moz-transition: none;
  -webkit-transition: none;
}

@mixin supports-safe-area-top {
  @supports (padding-top: env(safe-area-inset-top)) {
    @content;
  }
}

@mixin supports-safe-area-bottom {
  @supports (padding-bottom: env(safe-area-inset-bottom)) {
    @content;
  }
}

@mixin supports-safe-area-right {
  @supports (padding-right: env(safe-area-inset-right)) {
    @content;
  }
}

@mixin supports-safe-area-left {
  @supports (padding-left: env(safe-area-inset-left)) {
    @content;
  }
}

@mixin setTextLines($number: 1) {
  overflow: hidden;
  display: -webkit-box;
  -webkit-line-clamp: $number;
  -webkit-box-orient: vertical;
}

@mixin flexColumn($alignItems, $justifyContent) {
  display: flex;
  flex-direction: column;
  align-items: $alignItems;
  justify-content: $justifyContent;
}

@mixin flexRow($alignItems, $justifyContent) {
  display: flex;
  flex-direction: row;
  align-items: $alignItems;
  justify-content: $justifyContent;
}
